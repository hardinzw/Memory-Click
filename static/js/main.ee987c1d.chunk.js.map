{"version":3,"sources":["components/CharacterCard/index.js","components/Wrapper/index.js","components/Navbar/index.js","components/Jumbotron/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","className","onClick","event","clickEvent","target","src","alt","name","image","Wrapper","children","Navbar","navMsgColor","navMsg","score","highScore","Jumbotron","App","state","tunes","shuffleCharacters","wasClicked","checkClicked","bind","newArr","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElement","previousState","this","shuffled","includes","setState","setTimeout","map","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wpEAWeA,MARf,SAAuBC,GACnB,OACI,yBAAKC,UAAU,OAAOC,QAAS,SAAAC,GAAK,OAAIH,EAAMI,WAAWD,EAAME,OAAOC,OAC9D,yBAAKL,UAAU,gBAAgBM,IAAKP,EAAMQ,KAAMF,IAAKN,EAAMS,U,MCC5DC,MAJf,SAAiBV,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAMW,WCS1BC,G,MAVA,SAAAZ,GAAK,OAClB,yBAAKC,UAAU,WACb,sDACA,yBAAKA,UAAWD,EAAMa,aAAcb,EAAMc,QAC1C,uCACUd,EAAMe,MADhB,IACuB,0BAAMd,UAAU,WAAhB,KADvB,gBACuED,EAAMgB,c,MCMlEC,MAXf,SAAmBjB,GACf,OACI,yBAAKC,UAAU,6BACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,0BACA,uBAAGA,UAAU,QAAb,qG,OC6GDiB,E,2MA5GbC,MAAQ,CACNC,MAAO,EAAKC,oBACZN,MAAO,EACPC,UAAW,EACXH,YAAa,GACbC,OAAQ,2BACRQ,WAAY,I,EAKdlB,WAAa,EAAKmB,aAAaC,KAAlB,gB,mFAWX,IANA,IAAMC,EAASL,EAAMM,QACfC,EAAa,GAKZF,EAAOG,OAAS,GACrBD,EAAWE,KAAKJ,EAAOK,OAAOC,KAAKC,MAAMD,KAAKE,SAAWR,EAAOG,QAAS,GAAG,IAE9E,OAAOD,I,mCAGIO,GAAiB,IAAD,OAErBC,EAAgBC,KAAKjB,MAAMG,WAAWI,QAGtCW,EAAWD,KAAKf,oBAGlBN,EAAQqB,KAAKjB,MAAMJ,MACnBC,EAAYoB,KAAKjB,MAAMH,UAmB3B,GAhBIoB,KAAKjB,MAAMG,WAAWgB,SAASJ,KAE7BnB,IAAUC,GACZD,IACAC,KAIAD,IAIFoB,EAAcN,KAAKK,IAIjBE,KAAKjB,MAAMG,WAAWgB,SAASJ,GAAiB,CAElD,OAAOE,KAAKG,SAAS,CACnBxB,MAFU,EAGVC,UAAWA,EACXH,YAAa,YACbC,OAAQ,6BACRM,MAAOiB,EACPf,WAAY,KAehB,OAVAc,KAAKG,SAAS,CACZxB,MAAOA,EACPC,UAAWA,EACXH,YAAa,UACbC,OAAQ,8BACRM,MAAOiB,EACPf,WAAYa,IAIPK,YAAW,kBAAM,EAAKD,SAAS,CAAE1B,YAAa,OAAO,O,+BAKpD,IAAD,OACDM,EAAQiB,KAAKjB,MACnB,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CACEJ,MAAOI,EAAMJ,MACbC,UAAWG,EAAMH,UACjBF,OAAQK,EAAML,OACdD,YAAaM,EAAMN,cAErB,kBAAC,EAAD,MACCuB,KAAKjB,MAAMC,MAAMqB,KAAI,SAAArB,GAAK,OACzB,kBAAC,EAAD,CACEsB,GAAItB,EAAMsB,GACVlC,KAAMY,EAAMZ,KACZC,MAAOW,EAAMX,MACbL,WAAY,EAAKA,qB,GAtGXuC,aCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ee987c1d.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction CharacterCard(props) {\r\n    return (\r\n        <div className=\"card\" onClick={event => props.clickEvent(event.target.src)}>\r\n                <img className=\"img-container\" alt={props.name} src={props.image} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CharacterCard;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n  return <div className=\"wrapper\">{props.children}</div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Navbar = props => (\r\n  <div className=\"navbar \">\r\n    <div>Masters of the Memory</div>\r\n    <div className={props.navMsgColor}>{props.navMsg}</div>\r\n    <div>\r\n      Score: {props.score} <span className=\"divider\">|</span> High Score: {props.highScore}\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Navbar;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Jumbotron(props) {\r\n    return (\r\n        <div className=\"jumbotron jumbotron-fluid\">\r\n            <div className=\"container\">\r\n                <h1 className=\"display-2\">Do You Have the Power?</h1>\r\n                <p className=\"lead\">Click on an image to harness the power of Gray Skull, but don't click an image more than once!</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Jumbotron;","import React, { Component } from \"react\";\r\nimport CharacterCard from \"./components/CharacterCard\";\r\nimport Wrapper from \"./components/Wrapper\";\r\nimport Navbar from \"./components/Navbar\";\r\nimport Jumbotron from \"./components/Jumbotron\";\r\nimport tunes from \"./tunes.json\";\r\n\r\nclass App extends Component {\r\n  // Setting this.state.tunes to the tunes json array\r\n  state = {\r\n    tunes: this.shuffleCharacters(),\r\n    score: 0,\r\n    highScore: 0,\r\n    navMsgColor: '',\r\n    navMsg: 'Click an image to begin!',\r\n    wasClicked: [],\r\n  };\r\n\r\n  // Binds the current this context to checkClicked to have access to the current state\r\n  // When passed down to the Character component\r\n  clickEvent = this.checkClicked.bind(this);\r\n\r\n  // Used to shuffle the array of images when the DOM loads, and when an image is clicked\r\n  shuffleCharacters() {\r\n    // creates a copy of the current tunes array to modify it by value, and not by reference.\r\n    const newArr = tunes.slice();\r\n    const shuffleArr = [];\r\n\r\n    // Each loop through an index gets spliced from newArr, reducing its length.\r\n    // Gets a random index based off the current length of newArr.\r\n    // Splices the value from newArr, and pushes it to shuffleArr.\r\n    while (newArr.length > 0) {\r\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\r\n    }\r\n    return shuffleArr;\r\n  }\r\n\r\n  checkClicked(clickedElement) {\r\n    // Creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\r\n    const previousState = this.state.wasClicked.slice();\r\n\r\n    // Shuffles the images\r\n    const shuffled = this.shuffleCharacters();\r\n\r\n    // Track Score\r\n    let score = this.state.score;\r\n    let highScore = this.state.highScore;\r\n\r\n    //if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\r\n    if(!this.state.wasClicked.includes(clickedElement)) {\r\n      // If score and highScore are the same, then there is a new high score value\r\n      if (score === highScore) {\r\n        score++;\r\n        highScore++;\r\n\r\n        // If they are not equal, then only increase score value\r\n      } else {\r\n        score++;\r\n      };\r\n\r\n      // Adds the clicked item to wasClicked to track that it has been clicked\r\n      previousState.push(clickedElement)\r\n    };\r\n\r\n    // Resets the current score if the same element was clicked twice\r\n    if (this.state.wasClicked.includes(clickedElement)) {\r\n      let score = 0;\r\n      return this.setState({\r\n        score: score,\r\n        highScore: highScore,\r\n        navMsgColor: 'incorrect',\r\n        navMsg: 'You Do Not Have the Power!',\r\n        tunes: shuffled,\r\n        wasClicked: [],\r\n      });\r\n    };\r\n\r\n    // Continue game if an element has not been clicked twice (score increases)\r\n    this.setState({\r\n      score: score,\r\n      highScore: highScore,\r\n      navMsgColor: 'correct',\r\n      navMsg: 'By the Power of Gray Skull!',\r\n      tunes: shuffled,\r\n      wasClicked: previousState,\r\n    });\r\n\r\n    // Removes green 'correct' indicator after 1s on a successful click to re-render class\r\n    return setTimeout(() => this.setState({ navMsgColor: '' }), 1000)\r\n  };\r\n\r\n\r\n  // Map over this.state.tunes and render a TunesCard component for each tunes object\r\n  render() {\r\n    const state = this.state;\r\n    return (\r\n      <Wrapper>\r\n        <Navbar\r\n          score={state.score}\r\n          highScore={state.highScore}\r\n          navMsg={state.navMsg}\r\n          navMsgColor={state.navMsgColor}\r\n          />\r\n        <Jumbotron />\r\n        {this.state.tunes.map(tunes => (\r\n          <CharacterCard\r\n            id={tunes.id}\r\n            name={tunes.name}\r\n            image={tunes.image}\r\n            clickEvent={this.clickEvent}\r\n          />\r\n          ))}\r\n      </Wrapper>\r\n    );\r\n  };\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}